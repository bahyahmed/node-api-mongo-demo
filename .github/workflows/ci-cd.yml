name: Node.js CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: lint-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app-src
          path: |
            src/
            package.json
            package-lock.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    env:
      NODE_ENV: staging
      API_URL: ${{ secrets.API_URL }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app-src
          path: ./app

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install PM2 (if needed)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "\
          if ! command -v pm2 &> /dev/null; then \
            echo 'Installing PM2...'; \
            sudo npm install -g pm2; \
          else \
            echo 'PM2 already installed'; \
          fi"

      - name: Deploy via SCP
        run: |
          scp -o StrictHostKeyChecking=no -r ./app/* ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:${{ env.DEPLOY_PATH }}

      - name: Restart app
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "\
          pm2 start ${{ env.DEPLOY_PATH }}/src/index.js --name node-api --update-env"

